<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADUJ
        ywA2DsQALQLBADUNxAItAsEGLQLBBi0CwQYtAsEGLgPBCDQKwwIsAsAAbU7TAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAwC7EAOBDEACsAwAAuA8E+LQPBoi0CwbMtAsGyLQLBsy0CwbAuBMFZNQ3DCC8EwQBtTtMAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAFwZSACcAvwAtAsEALwTCNS0CwdstAsH/LQLB/y0Cwf8tAsH/LgPBqDAFwhIvBMIAAADTAG1O
        0wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAtAsEALgPBAC8FwiMtA8HILQLB/y0Cwf8tAsH/LQLB/y0DwbwvBcIaLgTBAC4D
        wgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAALwTCAC8EwgAvBcIULgPBsi0Cwf8tAsH/LQLB/y0Cwf8tA8HRLwTCKi4D
        wQAsAcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAF0/0gAyCMQAMwrDAC8F
        wgAuA8EALQLBAC0CwQAtAsEALQLBAC0CwQAtA8EAMQfCCS4DwZktAsH/LQLB/y0Cwf8tAsH/LQLB4i4E
        wT4tAsEAAACsACoAwAAuA8EALQLBAC0CwQAuA8EAMAXCADUMxAA0CcYAAAAAAAAAAAAQBTMALgPBAC8E
        wgAAALEALwXCGC4EwTQtAsE7LQLBOy0CwTstAsE7LQLBOy0CwTkuA8GJLQLB+y0Cwf8tAsH/LQLB/y0C
        we8uBMFVKgDAADQLwwArAMEALQLBAC4DwRotAsE7LQLBOy4EwS8wBsISKAC/AC8FwgAuA8EAFQdFAC4E
        wQAuBMEALwXCEy4DwYEtAsHWLQLB8C0CwfQtAsH0LQLB9C0CwfQtAsH0LQLB9C0Cwf0tAsH/LQLB/y0C
        wf8tAsH4LgPBbqmi6AAxB8IALgPCAC4DwQAvBcIcLQPBuy0CwfYtAsH0LQLB7S0Dwc0uA8F5MAXCEy4E
        wQAuBMEALwXCADAGwgguA8GbLQLB/y0Cwf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0C
        wf8tAsH/LQLB/S4DwYgzCsMFMAbCAC8FwQAuBMEALwXCEC0DwagtAsH/LQLB/y0Cwf8tAsH/LQLB/y0C
        wf8uA8GkMAbCDS8FwgAuA8EALwTCQy0CwfQtAsH/LQLB/y0Cwf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0C
        wf8tAsH/LQLB/y0Cwf8uA8GgMAbCDS8FwgAvBcIALwXCADAGwgcuA8GQLQLB/y0Cwf8tAsH/LQLB/y0C
        wf8tAsH/LQLB/y0CwfouBMFOLQLBACwBwQAuA8F1LQLB/y0Cwf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0C
        wf8tAsH/LQLB/y0Cwf8tAsH/LQPBti8FwhcuBMIAIwC+ADAGwgA2D8QBLgPBdy0CwfotAsH/LQLB/y0C
        wf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0DwXosAcEALQLBAC0CwX8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0C
        wf8tAsH/LQLB/y0Cwf8tAsH/LQLB/i4DwcIwBsIjJwC/ABoAuwAfAL0AOhPFAi4DwWEtAsHyLQLB/y0C
        wf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0Cwf8tAsH/LQLBfy0CwQAtAsEALQLBfy0Cwf8tAsH/LQLB/y0C
        wf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0Cwf8uA8H0LwTCsi8EwpIvBMKULwTClC8EwZMuA8GpLQLB7y0C
        wf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0Cwf8tAsF/LQLBAC0CwQAtAsF/LQLB/y0C
        wf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0C
        wf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0CwX8tAsEALQLBAC0C
        wX8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0C
        wf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0Cwf8tAsH/LQLBfy0C
        wQAtAsEALQLBfy0Cwf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0CwfstAsGyLQLBmC0C
        wZotAsGaLQLBmy0CwZstA8GhLQPBty0CwdktAsH5LQLB/y0Cwf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0C
        wf8tAsF/LQLBAC0CwQAtAsF/LQLB/y0Cwf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0Cwf8tAsH/LQLB/i4D
        wYcxB8IQNw/EBzcPxAczCsMFKAC/ACgAwAAyCMIGLwXCGi4DwVAuA8GuLQLB+C0Cwf8tAsH/LQLB/y0C
        wf8tAsH/LQLB/y0CwX8tAsEALQLBAC0CwX8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0C
        wf8tAsH/LQLB+S0Dwc0uA8G8LgPBvC0DwbUuA8GPLgTBPzQLwwMvBcIALQLBADEHwgguBMFmLQLB6i0C
        wf8tAsH/LQLB/y0Cwf8tAsH/LQLBfy0CwQAtAsEALQLBfy0Cwf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0C
        wf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0Cwf8tAsHvLgPBfDIIwwYwB8IAMAbCACcA
        vwAuA8FhLQLB9i0Cwf8tAsH/LQLB/y0Cwf8tAsF/LQLBAC0CwQAtAsF/LQLB/y0Cwf8tAsH/LQLB/y0C
        wf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0Cwf8tAsH4LgTBWiwB
        wQAlAL0AMQfCADMKwwcuA8GxLQLB/y0Cwf8tAsH/LQLB/y0CwX8tAsEALQLBAC0CwX8tAsH/LQLB/y0C
        wf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0C
        wf8tA8GwMgjDBTEHwgAuA8IALAHBAC4DwW8tAsH/LQLB/y0Cwf8tAsH/LQLBfy0CwQAtAsEALQLBfy0C
        wf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0C
        wf8tAsH/LQLB/y0Cwb0wBcIIMAXCADULyQAtAsEALgPBYi0Cwf8tAsH/LQLB/y0Cwf8tAsF/LQLBAC0C
        wQAtAsF/LQLB/y0Cwf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0C
        wf8tAsH/LQLB/y0Cwf8tAsH/LgPBgiQAvgA1DMMAeGDWACoAwAAuA8GGLQLB/y0Cwf8tAsH/LQLB/y0C
        wX8tAsEALQLBAC0CwX8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0C
        wf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0DwcEvBMIdLgTBACsAwAAuBMEALwXCHC0CwdEtAsH/LQLB/y0C
        wf8tAsH/LQLBfy0CwQAtAsEALQLBfy0Cwf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0Cwf8tAsH4LQLB9C0C
        wfQtAsH0LQLB9S0CwfYtAsH1LQLB8i0Cwd4uA8GVLwXCIi4DwQAvBcIALQLBAC8FwhguA8GkLQLB/y0C
        wf8tAsH/LQLB/y0Cwf8tAsF/LQLBAC0CwQAtAsF/LQLB/y0Cwf8tAsH/LQLB/y0CwecuA8GiLgPBYy4D
        wUMtAsE4LQLBNy0CwTcvBMI5MAbCOzAGwjsuBME0LwXCGyQAvgAtAsEANw/EAi8FwhouA8FcLQPBxi0C
        wf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0CwX8tAsEALQLBAC0CwX8tAsH/LQLB/y0Cwf8tAsHgLgPBeS0C
        wUQtAsE8LQLBPS0CwT0tAsE9LQLBPS0CwT0tAsE9LQLBPS4DwUAuA8FKLgPBXS4DwXsuA8GmLQLB2C0C
        wfstAsH/LQLB/y0Cwf8tAsH/LQLB/y0Cwf8tAsH/LQLBfi0CwQAsAcEALgPBbi0Cwf8tAsH/LQLB/y0C
        wfktAsHzLQLB9i0CwfYtAsH2LQLB9i0CwfYtAsH2LQLB9i0CwfYtAsH2LQLB9y0CwfotAsH+LQLB/y0C
        wf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0Cwf8uA8FlLQLBAC4EwQAvBcIwLQLB5i0C
        wf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0C
        wf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0Cwf8tAsH/LQLB3S8EwiYuBMIAMwnDAE0t
        zAAuBMFeLQLB4S0Cwf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0C
        wf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0Cwf8tAsH/LQLB/y0CweQuBMFZIwC+ADUM
        xAAxCMIAMQfCABkAuwAvBMIqLgPBdC0DwaUtAsG2LQLBty0CwbctAsG3LQLBty0CwbctAsG3LQLBty0C
        wbctAsG3LQLBty0CwbctAsG3LQLBty0CwbctAsG3LQLBty0CwbctAsG3LQLBty0DwawuA8GBLwTCMQAA
        sQAxCMIAMgnBAAAAAAAxCMIANAvDAC4EwQAsAMEANQzEAi4DwQctAsEHLQLBBy0CwQctAsEHLQLBBy0C
        wQctAsEHLQLBBy0CwQctAsEHLQLBBy0CwQctAsEHLQLBBy0CwQctAsEHLQLBBy0CwQcuA8EHMwrDBCoA
        wAAuA8EAMwrDADEHwgAAAAAAAAAAABAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
</value>
  </data>
</root>